{
    "action" :
    {
        //Allowed types: fontTest, save
        //  fontTest - writes specified string to specified file using specified font
        //  save - save specified font to a new file
        "actionType" : "fontTest",

        //Allowed sources: ti, images, bin, header, new
        //  ti - loads font from TotalImage using name from "newFontParameters.output.totalImage"
        //  images - loads font from files using names from "newFontParameters.output.files"
        //  bin - loads font from specified binary file
        //  header - loads font from specified header file
        //  new - creates new file following "newFontParameters"
        "fontSource" : "ti",

        //Path to file when using "fontSource" as "bin" or "header"
        "fontPath" : "output.h",
        
        //Allowed types: binary, header
        //  binary - binary file that contains font information
        //  header - C header for including in main program
        "saveAs" : "header",

        //Encoding to save font. Allowed encodings: raw, rle
        //  raw - dont using any encodings: save each pixel as 1 bit
        //  rle - Run Length Encoding
        //  rle_sb - optimised 7-bin Run Length Encoding
        "saveFontEncoding" : "rle",

        //String to write using specified font
        "fontTestString" : "Sample Text!!!",

        "outputHeaderFile" : "out.h",
        "outputBinaryFile" : "out.bin",
        "outputFontTestOutFile" : "fontTest.png"
    },
    
    "newFontParameters" : 
    {
        "encoding" : "unicode",

        //Font size
        "fontSize" : 10,

        //Allowed types: default, system, bypath
        //If type is "default" the default font will be using 
        //
        //If type is "system" you must specify string parameter 
        //   "name" with a display font name
        //
        //If type is "byPath" you must spicify string parameter 
        //   "path" with full (or relative) font path
        "fontType" : "default",
        "name" : "Courier",
        
        //Allowed modes: stretch, fixed, autosize
        //  stretch - symbols will be stretched saving their ratio to specified size 
        //  fixed - symbols will be only placed to specified rectangle
        //  autosize - size of rectangle will be fitted to the largest symbol of the list
        "sizeMode" : "stretch",
        
        //Allowed modes: centered, zero, centered_bottom
        //  centered - center of image by X and Y
        //  centered_bottom - center of image by X, and minimum Y
        //  zero - upper left corner of the image
        "positioningMode" : "centered_bottom",

        "symbolSequence" :
        {
            //Allowed types: "range", "list"
            //If type is range you must specify "start" and "end" 
            //   integer parameters
            //
            //If type is list you must specify "list" parameter as 
            //  list of integers
            "ssType" : "range",
            "start" : 40,
            "end" : 127
        },

         //symbolSize is not necessary when "sizeMode" is "autoSize"
        "symbolSize" : 
        {
            "width" : 30,
            "height" : 50
        },

        "output" : 
        {
            "outdir" : "output",
            
            //Save image for each char
            "files" : 
            {
                "saveFiles" : false,
                "filesNameFormat" : "%s.png"
            },

            //Save one image with all chars
            "totalImage" :
            {
                "saveTI" : true,
                "TIName" : "total.png",
                "imagesPerRow" : 20,
                
                //Hex color. Any color except black (000000) and white (FFFFFF)
                "separatorColor" : "770000"
            } 
        }
    }
}